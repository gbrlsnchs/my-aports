#!/bin/sh

die() {
	_varname="$1"

	trap - EXIT
	echo "ERROR: missing '$_varname' variable"
	exit 1
}

BOOT_UCODE="${BOOT_UCODE:-amd-ucode.img}"
BOOT_INITRAMFS="${BOOT_INITRAMFS:-initramfs-lts}"
BOOT_LINUZ="${BOOT_LINUZ:-\vmlinuz-lts}"
BOOT_LABEL="${BOOT_LABEL:-Alpine Linux}"

[ -z "$BOOT_ROOT" ] && die "BOOT_ROOT"
[ -z "$BOOT_DISK" ] && die "BOOT_DISK"
[ -z "$BOOT_PART" ] && die "BOOT_PART"

params="root=$BOOT_ROOT rw quiet"

if [ -n "$BOOT_MODULES" ]; then
	params="$params modules=$BOOT_MODULES"
fi

if [ -n "$BOOT_ROOTFLAGS" ]; then
	params="$params rootflags=$BOOT_ROOTFLAGS"
fi

if [ -n "$BOOT_CRYPTROOT" ]; then
	_cryptroot="$(blkid -o value -s UUID "$BOOT_CRYPTROOT")"
	params="$params cryptroot=UUID=$_cryptroot cryptdm=${BOOT_CRYPTDM:-cryptroot}"
fi

if [ -n "$BOOT_RESUME" ]; then
	params="$params resume=$BOOT_RESUME"

	if [ -n "$BOOT_RESUME_OFFSET" ]; then
		params="$params resume_offset=$BOOT_RESUME_OFFSET"
	fi
fi

params="$params initrd=\\$BOOT_UCODE initrd=\\$BOOT_INITRAMFS"

echo "unicode:    $params"
echo "label:      $BOOT_LABEL"
echo "disk:       $BOOT_DISK"
echo "part:       $BOOT_PART"
echo "loader:     $BOOT_LINUZ"

printf "\nDo you wish to proceed? [Y/n] "
read -r yesno

if [ "$yesno" != "${yesno#[Yy]}" ]; then
	doas efibootmgr \
		--create \
		--label "$BOOT_LABEL" \
		--disk "$BOOT_DISK" \
		--part "$BOOT_PART" \
		--loader="$BOOT_LINUZ" \
		--unicode "$params" \
		--verbose
else
	echo "EFI stubbing aborted!"
	exit 1
fi

